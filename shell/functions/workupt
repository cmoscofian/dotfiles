# A simple function to fetch and update all git projects at once
# based on a branch and a remote.
# 
# USAGE: f_workupt [-b branch] [-r remote] [-h] path
#
# [path]: Path to the workspace directory where all git projects reside.
# [branch]: Branch to switch into and fast-forward agains. Default: "develop"
# [remote]: Remote from which all changes will be fetched. Default: "origin"
#
# Author: Charles Moscofian <charlesmoscofian@hotmail.com>
function f::workupt() {
	local __branch="develop"
	local __remote="origin"

	local __opt
	local __help=0

	while getopts ":b:r:h" __opt; do
		case $__opt in
			b) __branch=$OPTARG;;
			r) __remote=$OPTARG;;
			h) __help=1;;
			\?) ;;
		esac
	done
	shift $(( OPTIND - 1 ))

	if [ $__help -eq 1 ]; then
		echo -e "USAGE: $0 [-b branch] [-r remote] [-h] path\n"
		return 0
	fi

	if [ ! -d $1 ] || [ -z $1 ]; then
		print::error "not a valid workspace directory"
		return 1
	fi

	print::info "updating against \"$__remote/$__branch\"..."

	local __path=$PWD
	local __workspace=$1

	cd $__workspace

	local __i_workspace
	for __i_workspace in $(ls); do
		[ ! -d $__i_workspace ] && continue

		cd $__i_workspace
		local __msg="project $__i_workspace"

		if git::is_worktree; then
			git switch --no-guess $__branch &> /dev/null
			if [ $? -ne 0 ]; then
				print::error "${__msg} unable to switch to branch $__branch"
				cd ..
				continue
			fi

			if [ ! -z $__remote ]; then
				git fetch $__remote &> /dev/null
				if [ $? -ne 0 ]; then
					print::error "${__msg} unable to fetch from remote $__remote"
					cd ..
					continue
				fi

				git pull $__remote $_branch &> /dev/null
				if [ $? -ne 0 ]; then
					print::error "${__msg} unable to pull from remote $__remote into branch $__branch"
					cd ..
					continue
				fi
			else
				git fetch --all &> /dev/null
				if [ $? -ne 0 ]; then
					print::error "${__msg} unable to fetch from ANY remote"
					cd ..
					continue
				fi

				git pull origin $__branch &> /dev/null
				if [ $? -ne 0 ]; then
					print::error "${__msg} unable to pull from remote origin into branch $__branch"
					cd ..
					continue
				fi
			fi
			print::success "${__msg}"
			cd ..
		else
			print::error "$__i_workspace is not a git directory"
			cd ..
		fi
	done

	cd $__path

	return 0
}

