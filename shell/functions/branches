# A simple function to find "dangling" branches recursively on the provided
# projects folder. Branches to be ignored can be provided.
#
# USAGE: f::branches [-b branch] [-r remote] [-h] path
#
# [path]: Path to the workspace directory where all git projects to scan reside.
# [branch]: Branches to ignore when checking local dangling branches. Default: "master\|main"
#
# Author: Charles Moscofian <charlesmoscofian@hotmail.com>
function f::branches() {
    local __branch="master\|main"

    local __opt
    local __help=0

    while getopts ":b:h" __opt; do
        case $__opt in
            b) __branch=$OPTARG;;
            h) __help=1;;
            \?) ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    if [ $__help -eq 1 ]; then
        echo -e "USAGE: $0 [-b branch] [-h] path\n"
        return 0
    fi

    if [ ! -d $1 ] || [ -z $1 ]; then
        print::error "not a valid workspace directory"
        return 1
    fi

    local __path=$PWD
    local __workspace=$1

    cd $__workspace

    local __i_workspace
    for __i_workspace in $(ls); do
        [ ! -d $__i_workspace ] && continue

        cd $__i_workspace
        local __msg="project $__i_workspace"

        if git::is_worktree; then
            local __dangling=$(git branch | grep -v "$__branch" | wc -l)
            if [ "$__dangling" -ne 0 ]; then
                print::error "$__msg has $__dangling branches"
                cd ..
                continue
            fi
            cd ..
        else
            print::error "$__i_workspace is not a git directory"
            cd ..
        fi
    done

    cd $__path

    return 0
}

