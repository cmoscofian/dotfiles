# A simple function to find "dangling" branches recursively on the provided
# projects folder. Branches to be ignored can be provided.
#
# USAGE: f::branches [-i ignore_pattern] [-r remote] [-h] ...paths
#
# [path]: Paths to the workspace directory where all git projects to scan
# reside. Must BE absolute paths
# [ignore_pattern]: Branches to ignore when checking local dangling branches.
# Default: "master\|main"
#
# Author: Charles Moscofian <charlesmoscofian@hotmail.com>
function f::branches() {
    local __ignore_pattern="master\|main"

    local __opt
    local __help=0

    while getopts ":i:h" __opt; do
        case $__opt in
            i) __ignore_pattern=$OPTARG;;
            h) __help=1;;
            \?) ;;
        esac
    done
    shift $(( OPTIND - 1 ))

    if [ $__help -eq 1 ]; then
        echo -e "USAGE: $0 [-b branch] [-h] path\n"
        return 0
    fi

    local __path=$PWD
    local __workspace
    local __i_workspace

    for __workspace in $@; do
        ([ ! -d $__workspace ] || [ -z $__workspace ]) && continue

        cd $__workspace

        for __i_workspace in $(ls); do
            ([ ! -d $__i_workspace ] || [ -z $__i_workspace ]) && continue

            cd $__i_workspace
            local __msg="project $__i_workspace"

            if git::is_worktree; then
                local __dangling=$(git branch | grep -v "$__ignore_pattern" | wc -l)
                if [ $__dangling -ne 0 ]; then
                    print::warning "$__msg has $__dangling branches"
                fi
            fi
            cd ..
        done
    done

    cd $__path

    return 0
}

